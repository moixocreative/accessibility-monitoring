name: Sync dist files to DigitalOcean Spaces

on:
  push:
    branches: [ master, development ]

env:
  RCLONE_CONFIG_S3_TYPE: s3
  RCLONE_CONFIG_S3_PROVIDER: DigitalOcean
  RCLONE_CONFIG_S3_ACL: public-read
  RCLONE_CONFIG_S3_ENDPOINT: ${{ secrets.RCLONE_CONFIG_S3_ENDPOINT }}
  RCLONE_CONFIG_S3_SPACE_PRODUCTION: welligence-website
  RCLONE_CONFIG_S3_SPACE_STAGING: welligence-website-staging
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
  PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
  # SMTP Configuration via Secrets
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASS: ${{ secrets.SMTP_PASS }}
  SMTP_FROM: ${{ secrets.SMTP_FROM }}
  # Email Configuration via Secrets
  ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
  EMERGENCY_EMAIL: ${{ secrets.EMERGENCY_EMAIL }}
  AUTHORITY_EMAIL: ${{ secrets.AUTHORITY_EMAIL }}

jobs:
  sync-dist-files:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'

    - name: Setup module dependencies cache
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/puppeteer
        key: Linux-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          Linux-node-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser

    - name: Install dependencies
      run: |
        export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
        yarn install --frozen-lockfile --network-timeout 100000

    - name: Build
      run: yarn build

    - name: Install rclone
      run: |
        curl -O https://downloads.rclone.org/rclone-current-linux-amd64.deb
        sudo dpkg -i rclone-current-linux-amd64.deb

    - name: Configure rclone
      run: |
        mkdir -p ~/.config/rclone
        cat > ~/.config/rclone/rclone.conf << EOF
        [s3]
        type = ${{ env.RCLONE_CONFIG_S3_TYPE }}
        provider = ${{ env.RCLONE_CONFIG_S3_PROVIDER }}
        access_key_id = ${{ secrets.RCLONE_CONFIG_S3_ACCESS_KEY_ID }}
        secret_access_key = ${{ secrets.RCLONE_CONFIG_S3_SECRET_ACCESS_KEY }}
        endpoint = ${{ env.RCLONE_CONFIG_S3_ENDPOINT }}
        acl = ${{ env.RCLONE_CONFIG_S3_ACL }}
        EOF

    - name: Set Rclone args based on branch
      run: |
        if [ "$GITHUB_REF" = "refs/heads/master" ]; then
          echo "RCLONE_CONFIG_S3_SPACE=${{ env.RCLONE_CONFIG_S3_SPACE_PRODUCTION }}" >> $GITHUB_ENV
        elif [ "$GITHUB_REF" = "refs/heads/development" ]; then
          echo "RCLONE_CONFIG_S3_SPACE=${{ env.RCLONE_CONFIG_S3_SPACE_STAGING }}" >> $GITHUB_ENV
        fi

    - name: Rclone sync dist/
      run: rclone sync dist/ s3:${{ env.RCLONE_CONFIG_S3_SPACE }}/dist

    - name: Accessibility Post-deploy Check
      run: |
        yarn audit:wcag --post-deploy
        yarn emergency --post-deploy

    - name: Generate Deploy Report
      run: |
        yarn report --deploy --branch ${{ github.ref_name }}
        yarn emergency --report --deploy

    - name: Upload Deploy Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-deploy-${{ github.ref_name }}
        path: |
          reports/
          logs/
        retention-days: 30 